# --------------------------------------------------------------------------
# GERENCIADOR DE CONFIGURA√á√ïES DE N√çVEL - AVALIECE1
# --------------------------------------------------------------------------

import streamlit as st
from typing import Dict, List, Optional
from config_api import config_nivel, NIVEL_PADRAO

class GerenciadorNivel:
    """Gerenciador para configura√ß√µes de n√≠vel de agrega√ß√£o"""
    
    def __init__(self):
        self.niveis_disponiveis = config_nivel.get_niveis_disponiveis()
        self.nivel_atual = NIVEL_PADRAO
    
    def renderizar_seletor_nivel(self) -> int:
        """
        Renderiza seletor de n√≠vel na sidebar
        
        Returns:
            N√≠vel selecionado pelo usu√°rio
        """
        st.sidebar.subheader("‚öôÔ∏è Configura√ß√µes de Dados")
        
        # Criar op√ß√µes para o selectbox
        opcoes_nivel = []
        for nivel, descricao in self.niveis_disponiveis.items():
            opcoes_nivel.append(f"{nivel} - {descricao}")
        
        # Selecionar n√≠vel atual
        indice_atual = list(self.niveis_disponiveis.keys()).index(self.nivel_atual)
        
        nivel_selecionado = st.sidebar.selectbox(
            "N√≠vel de Agrega√ß√£o dos Dados",
            options=opcoes_nivel,
            index=indice_atual,
            help="Escolha o n√≠vel de detalhamento dos dados:\n"
                 "‚Ä¢ Munic√≠pio: Vis√£o consolidada por munic√≠pio\n"
                 "‚Ä¢ Escola: Vis√£o detalhada por unidade escolar\n"
                 "‚Ä¢ Turma: Vis√£o granular por turma"
        )
        
        # Extrair o n√≠vel num√©rico da sele√ß√£o
        nivel_escolhido = int(nivel_selecionado.split(" - ")[0])
        
        # Atualizar n√≠vel atual
        self.nivel_atual = nivel_escolhido
        
        # Exibir informa√ß√µes sobre o n√≠vel selecionado
        self._exibir_info_nivel(nivel_escolhido)
        
        return nivel_escolhido
    
    def _exibir_info_nivel(self, nivel: int):
        """Exibe informa√ß√µes sobre o n√≠vel selecionado"""
        config_nivel_atual = config_nivel.get_config_nivel(nivel)
        
        with st.sidebar.expander("‚ÑπÔ∏è Sobre este n√≠vel", expanded=False):
            st.info(f"**{config_nivel_atual['tipo_agregacao']}**: {config_nivel_atual['descricao']}")
            
            # Exibir caracter√≠sticas espec√≠ficas do n√≠vel
            st.markdown("**Caracter√≠sticas:**")
            for caracteristica in config_nivel_atual['caracteristicas']:
                st.markdown(f"- {caracteristica}")
            
            # Exibir informa√ß√µes adicionais baseadas no tipo
            if nivel == 0:  # Munic√≠pio
                st.markdown("""
                **üë• P√∫blico-alvo:**
                - Secret√°rios de Educa√ß√£o
                - Coordenadores Municipais
                - Gestores da Rede
                """)
            elif nivel == 1:  # Escola
                st.markdown("""
                **üë• P√∫blico-alvo:**
                - Diretores de Escola
                - Coordenadores Pedag√≥gicos
                - Supervisores Escolares
                """)
            elif nivel == 2:  # Turma
                st.markdown("""
                **üë• P√∫blico-alvo:**
                - Professores
                - Coordenadores de √Årea
                - Especialistas em Educa√ß√£o
                """)
    
    def get_nivel_atual(self) -> int:
        """Retorna o n√≠vel atual configurado"""
        return self.nivel_atual
    
    def set_nivel(self, nivel: int):
        """Define um n√≠vel espec√≠fico"""
        if nivel in self.niveis_disponiveis:
            self.nivel_atual = nivel
        else:
            raise ValueError(f"N√≠vel {nivel} n√£o √© v√°lido. N√≠veis dispon√≠veis: {list(self.niveis_disponiveis.keys())}")
    
    def get_config_nivel_atual(self) -> Dict[str, str]:
        """Retorna a configura√ß√£o do n√≠vel atual"""
        return config_nivel.get_config_nivel(self.nivel_atual)
    
    def exibir_comparacao_niveis(self):
        """Exibe compara√ß√£o entre os diferentes n√≠veis"""
        with st.expander("üìä Compara√ß√£o entre N√≠veis de Agrega√ß√£o", expanded=False):
            st.markdown("### Diferen√ßas entre os n√≠veis de agrega√ß√£o:")
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.markdown("""
                **üèõÔ∏è Munic√≠pio (N√≠vel 0)**
                - Dados consolidados por munic√≠pio
                - Vis√£o geral da rede municipal
                - Indicadores agregados
                - Ideal para gest√£o municipal
                
                **üë• P√∫blico:** Secret√°rios, Coordenadores Municipais
                """)
            
            with col2:
                st.markdown("""
                **üè´ Escola (N√≠vel 1)**
                - Dados por unidade escolar
                - Detalhamento por escola
                - An√°lise comparativa entre escolas
                - Ideal para gest√£o escolar
                
                **üë• P√∫blico:** Diretores, Coordenadores Pedag√≥gicos
                """)
            
            with col3:
                st.markdown("""
                **üë®‚Äçüè´ Turma (N√≠vel 2)**
                - Dados por turma
                - M√°ximo detalhamento
                - An√°lise pedag√≥gica espec√≠fica
                - Ideal para professores
                
                **üë• P√∫blico:** Professores, Especialistas
                """)

# Inst√¢ncia global do gerenciador
gerenciador_nivel = GerenciadorNivel()

# --------------------------------------------------------------------------
# FUN√á√ïES AUXILIARES
# --------------------------------------------------------------------------

def obter_nivel_atual() -> int:
    """Fun√ß√£o auxiliar para obter o n√≠vel atual"""
    return gerenciador_nivel.get_nivel_atual()

def definir_nivel(nivel: int):
    """Fun√ß√£o auxiliar para definir um n√≠vel espec√≠fico"""
    gerenciador_nivel.set_nivel(nivel)

def obter_config_nivel_atual() -> Dict[str, str]:
    """Fun√ß√£o auxiliar para obter configura√ß√£o do n√≠vel atual"""
    return gerenciador_nivel.get_config_nivel_atual()
